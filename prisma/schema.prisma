datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  // Add relations for files and folders
  folders       Folder[]
  files         File[]
  // Add relation for votes
  votes         Vote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

// New models for file/folder structure
model Folder {
  id          String    @id @default(cuid())
  name        String
  // Self-relation for nested folders
  parentId    String?
  parent      Folder?   @relation("NestedFolders", fields: [parentId], references: [id], onDelete: SetNull)
  subfolders  Folder[]  @relation("NestedFolders")
  // Relation to files within this folder
  files       File[]
  // Relation to user who owns this folder
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model File {
  id          String    @id @default(cuid())
  name        String
  // Optional relation to folder (file can exist without folder)
  folderId    String?
  folder      Folder?   @relation(fields: [folderId], references: [id])
  // Product list stored as Array of Strings
  productList String[]
  // Puck data stored as JSON
  puckData    Json
  // Relation to user who owns this file
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  // is the filed public
  isPublic    Boolean   @default(false)
  // Reference to original file if this is a fork
  originalFileId String?
  // Vote related fields
  votes       Vote[]
  upvoteCount Int      @default(0)
  downvoteCount Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vote {
  id        String   @id @default(cuid())
  fileId    String
  userId    String
  isUpvote  Boolean
  file      File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([fileId, userId])
  @@index([fileId])
  @@index([userId])
}